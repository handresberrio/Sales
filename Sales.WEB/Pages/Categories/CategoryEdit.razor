@page "/categories/edit/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Editar Categoria</h3>

@if (category is null)
{
        <p>Cargando ..</p>
}
else
{
        <CategoryForm @ref="categoryForm" Category="category" OnValidSubmit="Edit" ReturnAction="Return" />
}

@code {

    public Category? category;
    private CategoryForm? categoryForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<Category>($"/api/categories/{Id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/categories");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        category = responseHttp.Response;
    }

    private async Task Edit()
    {
        var responseHTTP = await repository.Put("api/categories", category);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        Return();
    }

    private void Return()
    {
        categoryForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("categories");
    }

}
