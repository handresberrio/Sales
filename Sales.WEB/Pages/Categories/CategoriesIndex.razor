@page "/categories"

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Categorias</h3>

<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPage" />

<a class="btn btn-primary mb-3" href="/categories/create">Nueva Categoria</a>

<GenericList MyList="Categories">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th style="width:150px">Categorias</th>
                    <th style="width:260px"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in Categories!)
                {
                        <tr>
                            <td>
                                <a class="btn btn-warning" href="/categories/edit/@category.Id">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(category.Id))>Borrar</button>
                            </td>
                            <td>
                            @category.Name
                            </td>
                        </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {

    public List<Category>? Categories { get; set; }
    private int currentPage = 1;
    private int totalPages;


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        string url1 = $"api/categories?page={page}";
        string url2 = $"api/categories/totalPages";

        var responseHppt = await repository.Get<List<Category>>(url1);
        var responseHppt2 = await repository.Get<int>(url2);
        Categories = responseHppt.Response!;
        totalPages = responseHppt2.Response!;

    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHppt = await repository.Delete($"/api/categories/{id}");

        if (responseHppt.Error)
        {
            if (responseHppt.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHppt.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();

    }

}
